// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: events.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  event_name, 
  tickets_remaining,
  event_timestamp
) VALUES (
  $1, $2, $3
)
RETURNING event_id, event_name, tickets_remaining, event_timestamp
`

type CreateEventParams struct {
	EventName        string    `json:"event_name"`
	TicketsRemaining int32     `json:"tickets_remaining"`
	EventTimestamp   time.Time `json:"event_timestamp"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.EventName, arg.TicketsRemaining, arg.EventTimestamp)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventName,
		&i.TicketsRemaining,
		&i.EventTimestamp,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE event_id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, eventID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, eventID)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT event_id, event_name, tickets_remaining, event_timestamp FROM events
WHERE event_id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, eventID int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.EventName,
		&i.TicketsRemaining,
		&i.EventTimestamp,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT event_id, event_name, tickets_remaining, event_timestamp FROM events
WHERE event_id = ANY($1::bigint[])
`

func (q *Queries) GetEvents(ctx context.Context, ids []int64) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.EventName,
			&i.TicketsRemaining,
			&i.EventTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
